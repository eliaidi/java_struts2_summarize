1. Action 实现 ModelDriven 接口后的流程：
	
	<1>. 先会执行 ModelDrivenInterceptor 的 interceptor 方法
	
		public String intercept(ActionInvocation invocation) throws Exception {
		  	// 获取 Action 对象： EmployeeAction 对象，此时该 Action 已经实现了 ModelDriven 接口
		  	// public class EmployeeAction implements RequestAware, ModelDriven<Employee>
	        Object action = invocation.getAction();
	
			// 判断 action 是否是 ModelDriven 的实例
	        if (action instanceof ModelDriven) {
	        	// 强制转换为 ModelDriven 类型
	            ModelDriven modelDriven = (ModelDriven) action;
	            
	            // 获取值栈
	            ValueStack stack = invocation.getStack();
	            
	            // 调用 ModelDriven 接口的 getModel() 方法
	            // 即调用 EmployeeAction 的 getModel() 方法
	            /*
	            	public Employee getModel() {

						employee = new Employee();
						
						return employee;
					}
	            */
	            Object model = modelDriven.getModel();
	            if (model !=  null) {
	            	// 把 getModel() 方法的返回值压入到值栈的栈顶，实际压入的是 EmployeeAction 的 employee 成员变量
	            	stack.push(model);
	            }
	            if (refreshModelBeforeResult) {
	                invocation.addPreResultListener(new RefreshModelBeforeResult(modelDriven, model));
	            }
	        }
	        return invocation.invoke();
	    }
	
	<2>. 再执行 ParametersInterceptor 的 interceptor 方法： 把请求参数的值赋给栈顶对象对应的属性，
	若栈顶对象没有对应的属性，则查询值栈中下一个对象对应的属性。
		
		会将表单字段映射到值栈栈顶的各个属性中
	
	<3>. 需要注意的部分：
	
		getModel() 方法不能提供以下的实现
			public Employee getModel() {
				return new Employee();
			}
	
		因为以上用法的确会返回一个 Employee 对象到值栈的栈顶，但是当前 Action 中的 employee 成员变量 却是 null
		

2. 使用 paramsPrepareParamsStack 拦截器栈后的运行

	<1>. paramsPrepareParamsStack 和 Struts2 中默认的 defaultStack 都是拦截器栈，
		struts-default 默认使用的是 defaultStack
	
	<2>. 可以在 Struts 配置文件中通过以下方式修改使用默认的拦截器栈
		<!-- 配置使用 paramsPrepareParamsStack 作为默认的拦截器栈 -->
    	<default-interceptor-ref name="paramsPrepareParamsStack"></default-interceptor-ref>
   	
   	<3>. paramsPrepareParamsStack 拦截器在于执行的顺序
   	
   		params --> modelDriven --> params
   		所以可以先把请求参数赋给 Action 对应的属性，再根据 Action 的那个属性值决定压到值栈栈顶的对象，
   		最后再为栈顶对象的属性赋初值
   		
   			对 Edit 操作而言：
   				① 先为 EmployeeAction 的employeeId 赋值
   				② 根据 employeeId 从数据库中加载对应的对象，并放入到值栈的栈顶
   				③ 再为栈顶对象的 employeeId 赋值(实际上此时 employeeId 属性值已经存在)
   			
   			
   			
   			
   			
   			
   		
	